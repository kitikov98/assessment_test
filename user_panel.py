import io
import telebot
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from database import Database
from admin_panel import convert_to_pic

with open('keys.json', 'r', encoding='utf-8') as f:  # –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    text = json.load(f)

db = Database('auction.db')
tg_group = text['tg_group']
token = text['user_panel']
bot = telebot.TeleBot(token)

user_menu = ['–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã', '–†–æ–∑—ã–≥—Ä—ã—à', '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ü—Ä–∞–≤–∏–ª–∞', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ü–æ–º–æ—â—å', '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è',
             '–ë–∞–ª–∞–Ω—Å']
user_info = {'–†–æ–∑—ã–≥—Ä—ã—à': "–ü–æ–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è",
             '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': "–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –ñ –≤ —Å–ª–æ–≤–µ –ñ–û–ü–ê? –í –ñ–û–ü–ï —Ç–æ–ª—å–∫–æ –≤—ã",
             '–ü—Ä–∞–≤–∏–ª–∞': """–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤,–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–æ–ª–∂–µ–Ω—ã –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫‚ÄºÔ∏è
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¢–†–Å–• –¥–Ω–µ–π,–ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞üî•
–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù –í–û –í–°–ï–• –ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–°–¢–í–ê–• –ò –ê–£–ö–¶–ò–û–ù–ê–•ü§¨
–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞
–ê–Ω—Ç–∏—Å–Ω–∞–π–ø–µ—Ä - –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç
–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ ‚ÄºÔ∏è

–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞.
–°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É?ü§î
–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É‚ÄºÔ∏è


–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π,—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞–Ω—ã. –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º. 
–õ–æ—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å ,—ç–∫–æ–Ω–æ–º—è –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –ø–æ—á—Ç–µ.
–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã‚ÄºÔ∏è""",
             '–ü–æ–º–æ—â—å': """–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã @kitikov98

–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ –∏ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫."""}
menu_1 = InlineKeyboardMarkup()
for item in user_menu:
    menu_1.add(InlineKeyboardButton(item, callback_data='A' + item))

main_menu = '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
menu_2 = InlineKeyboardMarkup()
menu_2.add(InlineKeyboardButton(main_menu, callback_data='B' + main_menu))


def discription_text(list1):
    text = f"""
–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {list1[1]}
id –ø—Ä–æ–¥–∞–≤—Ü–∞: tg://openmessage?user_id={list1[2]}
–º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: {list1[3]}
–æ–ø–∏—Å–∞–Ω–∏–µ: {list1[4]}
–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤: {list1[7]}
–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤: {list1[8]}
—Ç–∏–ø –ª–æ—Ç–∞: {list1[9]}
"""
    return text


def strike(message, who, whom, role=None):
    if role == 'user':
        with db.connection:
            db.connection.execute(f"""INSERT INTO reports (admin_id, user_id, status, description, relationship)
             VALUES(?,?,?,?,?)""", (whom, who, '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', message.text, 'user-to admin'))
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –≤–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')

@bot.message_handler(commands=['start'])
def start_admin_panel(message):
    try:
        with db.connection:
            db.connection.execute(f"""INSERT INTO user (tg_id, balance, number_of_payments,
             status_auto_bid, strike_status) VALUES(?,?,?,?,?)""", (message.chat.id, 400, 0, 0, 0))
    except:
        pass

    if message.text != '/start':
        with db.connection:
            lot = db.connection.execute(f'SELECT * FROM lots WHERE id={message.text.split(" ")[1]}').fetchone()
        lot_menu = InlineKeyboardMarkup()
        lot_menu.add(InlineKeyboardButton('time', callback_data='t' + str(message.text.split(" ")[1])),
                     InlineKeyboardButton('–æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='i'),
                     InlineKeyboardButton('–¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data='d' + str(message.text.split(" ")[1])))
        lot_menu.add(InlineKeyboardButton('30 ‚Ç©', callback_data='p' + str(message.text.split(" ")[1]) + '.30'),
                     InlineKeyboardButton('50 ‚Ç©', callback_data='p' + str(message.text.split(" ")[1]) + '.50'),
                     InlineKeyboardButton('150 ‚Ç©', callback_data='p' + str(message.text.split(" ")[1]) + '.150'))
        bot.send_photo(message.chat.id, convert_to_pic(lot[11]), caption=f'{discription_text(lot)}',
                       reply_markup=lot_menu)
    else:
        bot.send_message(message.chat.id, '–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=menu_1)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    id = call.message.chat.id
    flag = call.data[0]
    data = call.data[1:]
    if flag == 't':
        with db.connection:
            lots = db.connection.execute(f'SELECT * FROM lots WHERE id ={data}').fetchone()
        date_finish = lots[8]
        date_finish = datetime.strptime(date_finish, '%Y-%m-%d %H:%M:%S')
        now = datetime.now()
        delta = date_finish - now
        delta = str(delta).split('.')[0]
        bot.answer_callback_query(callback_query_id=call.id,
                                  text='–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ ' + str(delta)[-8:-6] + ' —á–∞—Å–æ–≤ ' + str(delta)[
                                                                                             -5:-3] + ' –º–∏–Ω—É—Ç ' +
                                       str(delta)[-2:] + ' —Å–µ–∫—É–Ω–¥')
    elif flag == 'i':
        bot.answer_callback_query(callback_query_id=call.id,
                                  text="""1. –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ —á—ë—Ç–æ-—Ç–∞–º, –Ω–µ –∑–∞–±—É–¥—å –ø–æ–º–µ–Ω—è—Ç—å""",
                                  show_alert=True)

    elif flag == 'd':
        with db.connection:
            lot = db.connection.execute(f'SELECT * FROM lots WHERE id ={data}').fetchone()
        file_obj = io.BytesIO(lot[5])
        file_obj.name = lot[6]
        # text_1 = discription_text(lot)
        bot.send_document(call.message.chat.id, file_obj, caption="–í–æ—Ç –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç")

    elif flag == 'p':
        lot_id = data.split('.')[0]
        bid = int(data.split('.')[1])
        with db.connection:
            message_id = db.connection.execute(f'SELECT message_id FROM lots WHERE id={lot_id}').fetchone()[0]
            lots = db.connection.execute(f'SELECT * FROM lots WHERE id ={lot_id}').fetchone()
        print(message_id)
        bot.send_message(call.message.chat.id, f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ {int(lots[1]) + bid} –ø—Ä–∏–Ω—è—Ç–∞')
        with db.connection:
            user_id = db.connection.execute(f'SELECT id FROM user WHERE tg_id = {call.message.chat.id}').fetchone()[0]
            db.connection.execute(f'INSERT INTO bids (lot_id, bid, user_id) VALUES (?,?,?)',
                                  (lot_id, (int(lots[1]) + bid), user_id))

    elif flag == 'A':
        if data == '–ë–∞–ª–∞–Ω—Å':
            with db.connection:
                user_balance = db.connection.execute(f"""SELECT balance FROM user 
                WHERE tg_id = {call.message.chat.id}""").fetchone()[0]
            bot.edit_message_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id} –∏–º–µ–µ—Ç –±–∞–ª–∞–Ω—Å –≤ {user_balance} –∑–æ–ª–æ—Ç–æ—Ö –º–æ–Ω–µ—Ç',
                                  call.message.chat.id, call.message.message_id, reply_markup=menu_2)
        elif data == '–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã':
            with db.connection:
                user_id = db.connection.execute(f'SELECT id FROM user WHERE tg_id = {call.message.chat.id}').fetchone()[
                    0]
                bids = db.connection.execute(f'SELECT * FROM bids WHERE user_id ={user_id} ').fetchall()
            if type(bids) == tuple:
                bids = [bids]
            text_bids = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–∏:\n'
            for bid in bids:
                text_bids += f'–õ–æ—Ç ‚Ññ {bid[1]} —Å–æ —Å—Ç–∞–≤–∫–æ–π –≤ {bid[2]}\n'
            bot.edit_message_text(text_bids, call.message.chat.id, call.message.message_id, reply_markup=menu_2)
        elif data == '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è':
            admin_report_menu = InlineKeyboardMarkup()
            with db.connection:
                admin_id = db.connection.execute(f"""SELECT tg_id FROM admin""").fetchall()
            if type(admin_id) == tuple:
                admin_id = [admin_id]
            for admin in admin_id:
                admin_report_menu.add(InlineKeyboardButton(str(admin[0]), callback_data='C' + str(admin[0])))
            bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', call.message.chat.id, call.message.message_id,
                                  reply_markup=admin_report_menu)
        else:
            bot.edit_message_text(user_info[data], call.message.chat.id, call.message.message_id, reply_markup=menu_2)
    elif flag == 'B':
        bot.edit_message_text("–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", call.message.chat.id, call.message.message_id, reply_markup=menu_1)
    elif flag == 'C':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤')
        bot.register_next_step_handler(msg, strike, call.message.chat.id, data, 'user')

    # elif flag == 'D':
    #     msg = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤', call.message.chat.id, call.message.message_id)
    #     bot.register_next_step_handler(msg, strike, data, call.message.chat.id, 'adm')


def user_panel_run():
    print('ready')
    bot.polling()


if __name__ == '__main__':
    user_panel_run()
